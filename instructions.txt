++++++++++++++++++++++++++++++Examples of using simulators++++++++++++++++++++++++++++++++++++++++++++++++
// primero de exporta esta ruta para poder usar "riscv64-unknown-elf-gcc"

export PATH=$PATH:/opt/riscv/bin   

// For using with pk
$ riscv64-unknown-elf-gcc -o nombre nombre.c -static-libgcc -lm
$ spike pk nombre
$ riscv64-unknown-elf-as -o nombre nombre.c -static-libgcc -lm   // este es para ensamblador

// For using with bare metal 
$ riscv64-unknown-elf-gcc -fno-common -fno-builtin-printf -specs=htif_nano.specs -c hello.c
$ riscv64-unknown-elf-gcc -static -specs=htif_nano.specs hello.o -o hello.riscv
$ spike hello.riscv

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

************************Steps for install RISC-V GNU Compiler Toolchain**********************************

// Firstly, we need to install common development tools:
$ sudo apt-get install autoconf automake autotools-dev curl python3 libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev git 

$ git clone --recursive https://github.com/riscv/riscv-gnu-toolchain
$ cd riscv-gnu-toolchain
// if you want without bare matal (normal install) skip --with-cmodel=medany
$ ./configure --prefix=/opt/riscv --with-cmodel=medany
$ sudo make 
// For you can use this tool is necessary to add your rute of installation at path
$ export PATH=$PATH:/opt/riscv/bin 
*********************************************************************************************************
***********************Build Steps for install Spike RISC-V ISA Simulator********************************

$ sudo apt-get install device-tree-compiler
$ git clone --recursive https://github.com/riscv/riscv-isa-sim.git
$ cd riscv-isa-sim
$ mkdir build
$ cd build
$ ../configure --prefix=/opt/riscv/
$ make 
$ sudo make install  
*********************************************************************************************************

************************Steps for install QEMU **********************************************************
// Firstly, we need to install common development tools:

$ sudo apt install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev git libpixman-1-dev libglib2.0-dev ninja-build gcc-riscv64-linux-gnu

$ sudo apt-get install -y gcc-riscv64-linux-gnu 
// https://toolchains.bootlin.com/  This link is for tool already built 
$ sudo apt-get install -y libpixman-1-dev
$ sudo apt-get install libglib2.0-dev
$ sudo apt install ninja-build
$ git clone https://github.com/qemu/qemu
$ cd qemu
$ git checkout v5.2.0
$ ./configure --target-list=riscv64-softmmu
$ make -j $(nproc)
$ sudo make install

// Ready, you already have the QEMU installation

************************************************************************************************************
********************Steps for install libgloss-htif ********************************************************
// this library is for use bare-metal with spike
$ git clone https://github.com/ucb-bar/libgloss-htif.git
$ cd libgloss-htif/
$ mkdir build
$ cd build
// The comand has to be the following: --libdir=/rute/of/Toolchain//riscv64-unknown-elf/lib
$ ../configure --prefix=/opt/riscv/riscv64-unknown-elf --host=riscv64-unknown-elf --libdir=/opt/riscv/riscv64-unknown-elf/lib
$ make
$ sudo make install
************************************************************************************************************
*******************Steps for install RISC-V Proxy Kernel and Boot Loader************************************
$ git clone https://github.com/riscv/riscv-pk.git
$ cd riscv-pk
$ mkdir build
$ cd build
$ ../configure --prefix=/opt/riscv/ --host=riscv64-unknown-elf
$ make
$ sudo make install
************************************************************************************************************
*****************************************Options of compile*************************************************

compilador 
riscv64-unknown-elf-gcc -g interrupt.c entry.S init.c -DNHARTS=1 -I ../env -T targets/RISC-V/spike64.lds -nostartfiles -mcmodel=medany -DXLEN=64 -o interrupt_out -march=rv64imafc -mabi=lp64

compilador 
riscv64-unknown-elf-gcc -g checksum.c tiny-malloc.c infinite_loop.S -DDEFINE_MALLOC -DDEFINE_FREE entry.S init.c -DNHARTS=1 -I ../env -T targets/RISC-V/spike64.lds -nostartfiles -mcmodel=medany -DXLEN=64 -o spike64_interrupt_out -march=rv64imafc -mabi=lp64

spike 
spike -p1 --isa RV64IMAFC --dm-auth --dm-progsize 0 --dm-sba 64 --dm-abstract-rti 30 -m0x1212340000:0x10000000 --rbb-port 0 spike64_interrupt_out

